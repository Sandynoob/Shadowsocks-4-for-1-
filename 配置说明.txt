sudo -i获取账户root权限

wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh（如果是centos7 先输入 yum install wget -y）
chmod +x shadowsocks-all.sh
./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log
三行依次输入

./shadowsocks-all.sh uninstall
卸载方法

各版本默认配置文件（显示和编辑配置文件代码 vi   然后可多用户配置）
Shadowsocks-Python 版：
/etc/shadowsocks-python/config.json

ShadowsocksR 版：
/etc/shadowsocks-r/config.json

Shadowsocks-Go 版：
/etc/shadowsocks-go/config.json

Shadowsocks-libev 版：
/etc/shadowsocks-libev/config.json

多用户配置示例：

{
"server":"0.0.0.0",
"server_ipv6": "[::]",
"local_address":"127.0.0.1",
"local_port":1080,
"port_password":{
    "8989":"password1",
    "8990":"password2",
    "8991":"password3"
},
"timeout":300,
"method":"aes-256-cfb",
"protocol": "origin",
"protocol_param": "",
"obfs": "plain",
"obfs_param": "",
"redirect": "",
"dns_ipv6": false,
"fast_open": false,
"workers": 1
}


启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。

Shadowsocks-Python 版：
/etc/init.d/shadowsocks-python start | stop | restart | status

ShadowsocksR 版：
/etc/init.d/shadowsocks-r start | stop | restart | status

Shadowsocks-Go 版：
/etc/init.d/shadowsocks-go start | stop | restart | status

Shadowsocks-libev 版：
/etc/init.d/shadowsocks-libev start | stop | restart | status

BBR方法（要先安装BBR再安装ssr）
root权限下
wget -N --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && chmod +x bbr.sh && bash bbr.sh
安装好后重启

重启完成后，进入 VPS，验证一下是否成功安装最新内核并开启 TCP BBR，输入以下命令：
uname -r
# 查看内核版本，含有 4.9.0 就表示 OK 了
# ――――――――――――
sysctl net.ipv4.tcp_available_congestion_control
# 返回值一般为：
# net.ipv4.tcp_available_congestion_control = bbr cubic reno
# ――――――――――――
sysctl net.ipv4.tcp_congestion_control
# 返回值一般为：
# net.ipv4.tcp_congestion_control = bbr
# ――――――――――――
sysctl net.core.default_qdisc
# 返回值一般为：
# net.core.default_qdisc = fq
# ――――――――――――
lsmod | grep bbr
# 返回值有 tcp_bbr 模块即说明bbr已启动

更新到最新内核
yum --enablerepo=elrepo-kernel update -y 
reboot



Shadowsocks查看服务器上面的 用户连接数 方法
首先，我们是使用netstat命令来查询当前服务器（VPS）的连接数据。

以下方法适用于 ShadowsocksR(Python) 的服务端，因为ShadowsocksR服务端由 Python 编写，并且默认开启ipv6，所以很容易过滤出一些信息。
显示出由Python建立完成的TCP链接列表或连接数

# 显示所有进出链接
netstat -anp |grep 'ESTABLISHED' |grep 'python'
# 仅显示链接服务器的用户连接
netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6'
# 仅显示链接服务器的用户连接数量
netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |wc -l
# 仅显示链接服务器的用户连接并写入到文件
netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6'>>/root/log.txt
 
# 如果你是多用户版(多个端口)的服务端，那么你可以用这个命令
# 显示当前链接服务器的用户的SS端口
netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |awk '{print $4}' |sort -u
# CentOS6系统用这个，CentOS7用上面那个。
netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' | grep '::ffff:' |awk '{print $4}' |sort -u
# 显示当前链接服务器的用户的SS端口数量
netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |awk '{print $4}' |sort -u |wc -l
# CentOS6系统用这个，CentOS7用上面那个。
netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp' | grep '::ffff:' |awk '{print $4}' |sort -u |wc -l
 
# 显示当前所有链接SS的用户IP
netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |awk '{print $5}' |awk -F ":" '{print $1}' |sort -u
# 显示当前所有链接SS的用户IP数量
netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |awk '{print $5}' |awk -F ":" '{print $1}' |sort -u |wc -l
第一条 命令是 把所有的进出链接都列出来，Shadowsocks客户端在链接服务器后 本地的IP和端口 是 “进” 的，服务器在接收到Shadowsocks客户端的数据后会去访问指定的网站或IP，而这是 “出”的。这一条命令就是把这 一进一出 的信息都列出来，可以知道 客户端用户连接的是哪个 SS端口，还有客户 自身的IP和端口。

第二条 命令是 仅显示链接服务器的用户的链接，也就是上面一段话中说的 “进”，这个命令不会吧服务器在访问的网站或IP给列出来，纯粹用来看 Shadowsocks用户的链接信息。

第三条 命令是 仅显示链接服务器的用户连接数量，有时候链接 当前服务器的 Shadowsocks用户很多，你只想知道有几个人链接，那就用这一条命令（这个链接数量不是准确的，具体看下面的注意说明）。

第四条 命令是 仅显示链接服务器的用户连接并写入到文件，有时候在ssh上面查看大量文本不是一个好主意，所以保存到某个目录，然后自己去用sftp下载下来看信息是个不错的选择。

第五条 命令是 显示当前链接服务器的用户的SS端口，这个命令会去除重复的，最后显示的只有 正在链接SS服务器的用户的SS端口。

第六条 命令是 显示当前链接服务器的用户的SS端口数量，这个就是显示 数量。

第七条 命令是 显示当前所有链接SS的用户IP，这个命令会去除重复的，最后显示的只有 正在链接SS服务器的用户的IP。

第八条 命令是 显示当前所有链接SS的用户IP数量，这个就是显示 数量。

注意：你经常会看到 用户IP一样但后面的端口不一样(1.1.1.1:2333、1.1.1.1:6666)，那是因为他的SS客户端开了好几条TCP链接，所以一般情况下还是一个人在使用，但是也不排除路由器局域网情况下多个人同时使用，这时候也是这样显示的。
如果你想单独查看一个SS端口的链接数，那你可以看看下面几条命令。

netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep VPS_IP:SS_Port
# 示例 netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep 233.233.233.233:10000
 
netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep VPS_IP:SS_Port |wc -l
# 示例 netstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep 233.233.233.233:10000 |wc -l
第一条是 列出 当前SS端口连接的链接数。比如：服务器IP是 233.233.233.233 ，然后你想要知道链接数的端口是 10000 ，那命令就是第二行的示例。

第二条是 显示 当前SS端口连接的链接数，这个只是显示有几个链接数。示例如上。